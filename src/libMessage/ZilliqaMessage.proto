syntax = "proto2";

package ZilliqaMessage;

// ============================================================================
// Primitives
// ============================================================================

message ByteArray
{
    required bytes data = 1;
}

message ShardingStructure
{
    message Member
    {
        required ByteArray pubkey   = 1;
        required ByteArray peerinfo = 2;
    }
    message Shard
    {
        repeated Member members     = 1;
    }
    repeated Shard shards           = 1;
}

message TxSharingAssignments
{
    message AssignedNodes
    {
        repeated ByteArray receivers  = 1;
        repeated ByteArray senders    = 2;
    }
    repeated ByteArray dsnodes        = 1;
    repeated AssignedNodes shardnodes = 2;
}

// ============================================================================
// Directory Service messages
// ============================================================================

message DSPoWSubmission
{
    message Data
    {
        required uint64 blocknumber        = 1;
        required ByteArray submitterpeer   = 2;
        required ByteArray submitterpubKey = 3;
        required uint64 nonce              = 4;
        required string resultinghash      = 5;
        required string mixhash            = 6;
    }
    required Data data                     = 1;
    required ByteArray signature           = 2;
}

// ============================================================================
// Node messages
// ============================================================================

message NodeDSBlock
{
    required uint32 shardid                   = 1;
    required ByteArray dsblock                = 2;
    required ByteArray powwinnerpeer          = 3;
    required ShardingStructure sharding       = 4;
    required TxSharingAssignments assignments = 5;
}

message NodeFinalBlock
{
    required uint32 shardid       = 1;
    required uint64 dsblocknumber = 2;
    required uint32 consensusid   = 3;
    required ByteArray txblock    = 4;
    required bytes statedelta     = 5;
}

// ============================================================================
// Lookup messages
// ============================================================================

message LookupGetSeedPeers
{
    required uint32 listenport = 1;
}

message LookupSetSeedPeers
{
    repeated ByteArray candidateseeds = 1;
}

message LookupGetDSInfoFromSeed
{
    required uint32 listenport = 1;
}

message LookupSetDSInfoFromSeed
{
    message DSNode
    {
        required ByteArray pubkey = 1;
        required ByteArray peer   = 2;
    }
    repeated DSNode dsnodes       = 1;
}

message LookupGetDSBlockFromSeed
{
    required uint64 lowblocknum  = 1;
    required uint64 highblocknum = 2;
    required uint32 listenport   = 3;
}

message LookupSetDSBlockFromSeed
{
    required uint64 lowblocknum  = 1;
    required uint64 highblocknum = 2;
    repeated ByteArray dsblocks  = 3;
}

message LookupGetTxBlockFromSeed
{
    required uint64 lowblocknum  = 1;
    required uint64 highblocknum = 2;
    required uint32 listenport   = 3;
}

message LookupSetTxBlockFromSeed
{
    required uint64 lowblocknum  = 1;
    required uint64 highblocknum = 2;
    repeated ByteArray txblocks  = 3;
}

message LookupGetTxBodyFromSeed
{
    required bytes txhash      = 1;
    required uint32 listenport = 2;
}

message LookupSetTxBodyFromSeed
{
    required bytes txhash     = 1;
    required ByteArray txbody = 2;
}

message LookupGetNetworkIDFromSeed
{
    // Unused
}

message LookupSetNetworkIDFromSeed
{
    required string networkid = 1;
}

message LookupGetStateFromSeed
{
    required uint32 listenport = 1;
}

message LookupSetStateFromSeed
{
    required ByteArray accounts = 1;
}

message LookupSetLookupOffline
{
    required uint32 listenport = 1;
}

message LookupSetLookupOnline
{
    required uint32 listenport = 1;
}

message LookupGetOfflineLookups
{
    required uint32 listenport = 1;
}

message LookupSetOfflineLookups
{
    repeated ByteArray nodes = 1;
}

message LookupRaiseStartPoW
{
    // Empty
}

message LookupGetStartPoWFromSeed
{
    required uint32 listenport = 1;
}

message LookupSetStartPoWFromSeed
{
    // Empty
}